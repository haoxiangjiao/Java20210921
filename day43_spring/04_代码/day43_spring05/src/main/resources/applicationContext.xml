<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">


    <!--1. 打开扫描开关-->
    <context:component-scan base-package="com.itheima"/>

    <!--2. 让spring托管jdbctemplate，以便给dao层注入-->
    <bean id="template" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="ds"/>
    </bean>

    <!--3. 让spring托管dataSource -->
    <bean id="ds" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="com.mysql.jdbc.Driver"/>
        <property name="jdbcUrl" value="jdbc:mysql:///day41_spring"/>
        <property name="user" value="root"/>
        <property name="password" value="root"/>
    </bean>


    <!--=======================以下属于事务的配置=================-->

  <!--  1. 先声明事务管理员，让spring托管事务的管理员
            1.1 事务的管理员是由dao层的技术决定的。
            1.2 如果dao层使用的是jdbcTemplate | Mybatis ，那么事务的管理员是DataSourceTransactionManager
            1.3 如果dao层使用的是Hibernate , 那么事务的管理员是HibernateTransactionManager
        2. 事务管理员操作事务的时候，需要用到连接对象，所以需要把DataSource给它。
-->
    <bean id="tm" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="ds"/>
    </bean>

    <!--
        2. 要配置事务了 ，其实就是要表示出来什么样的方法要用上事务，并且用的事务规则是什么？
            2.1 定义一套事务的规则
            2.2 定义切面表达式 ，根据这串表达式去找到匹配的方法。
                当这些方法执行的时候，就给他们增强事务的功能。
    -->

    <!--
        配置事务的规则
            tx:advice ：  用来定义事务的规则
                id :这个事务规则的一个唯一标识符。
                transaction-manager : 指定事务的管理员
            tx:attributes : 用来配置事务的规则
                tx:method : 用于配置具体的方法，使用什么样的事务规则
                    name : 具体的方法名|或者一类方法  save*   saveUser   * : 所有的方法
                    isolation ： 表示事务的隔离级别
                    propagation :  表示事务的传播行为。
                    read-only ： 事务是否是只读的
                    timeout ： 表示事务的超时时间， -1表示不会超时。
    -->
     <tx:advice id="myAdvice" transaction-manager="tm">
         <tx:attributes>
             <!--<tx:method name="add" isolation="DEFAULT" propagation="REQUIRED" read-only="false" timeout="-1"/>
             <tx:method name="update" isolation="DEFAULT" propagation="REQUIRED" read-only="false" timeout="-1"/>
             <tx:method name="find*" isolation="DEFAULT" propagation="REQUIRED" read-only="true" timeout="-1"/>-->
             <tx:method name="*"/>

             <tx:method name="add*" isolation="DEFAULT" propagation="REQUIRED" read-only="false" timeout="-1"/>
             <tx:method name="delete*" isolation="DEFAULT" propagation="REQUIRED" read-only="false" timeout="-1"/>
             <tx:method name="update*" isolation="DEFAULT" propagation="REQUIRED" read-only="false" timeout="-1"/>
             <tx:method name="find*" isolation="DEFAULT" propagation="REQUIRED" read-only="true" timeout="-1"/>
         </tx:attributes>
     </tx:advice>

    <!--
        配置切面的表达式
            aop:config : aop的配置
               aop:advisor: 主要是用来配置事务的，aop专门给事务定义的标签
                    pointcut : 定义表达式，根据这串表达式去找匹配的方法
                    advice-ref : 指定事务的规则进来。
    -->
    <aop:config>
        <aop:advisor advice-ref="myAdvice" pointcut="execution(* com.itheima..*.*(..))"/>
    </aop:config>
</beans>