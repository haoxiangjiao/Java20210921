1.MyBatis快速入门
	1.1：创建Maven项目 添加jar包依赖
	1.2：创建javabean
	1.3：创建dao接口
	1.4：创建dao接口映射文件(注意：dao接口映射文件要和dao接口名称保持一致 并且在同级目录)
	1.5：创建MyBatis 核心配置文件(mybatis-config.xml)
	1.6：创建测试类 测试使用  (加载配置文件-->SqlSessionFactoryBuilder-->SqlSessionFactory-->SqlSession-->代理对象)
2.MyBatis核心配置文件详解
	2.1：配置文件中的元素要注意顺序
	2.2：properties元素   用于引入外部properties文件
		<properties resource="jdbc.properties" />
	2.3：设置别名 批量包扫描
		<typeAliases>
			<package name="com.itheima.bean"/>
		</typeAliases>
	2.4：引入映射文件 批量包扫描
		<mappers>
			<package name="com.itheima.dao"/>
		</mappers>
3.MyBatis CURD
	增加：	<insert id="接口方法名" parameterType="接口方法参数类型">
				<selectKey keyProperty="主键属性" resultType="属性类型" order="BEFORE|AFTER">
					select last_insert_id();
				</selectKey>
				增加的sql语句
			</insert>
	删除：	<delete id="接口方法名" parameterType="接口方法参数类型">
				删除的sql语句
			</delete>
	修改：	<update id="接口方法名" parameterType="接口方法参数类型">
				修改的sql语句
			</update>
	查询：	<select id="接口方法名" parameterType="接口方法参数类型" resultType|resultMap="方法的返回值类型">
				查询的sql语句
			</select>
4.parameterType的深入
	1.传递简单类型   eg：int、String
	2.传递pojo对象   eg：对象类型 User
	3.传递多个简单类型参数   ①封装对象 #{对象属性}  ②使用注解@Param #{参数名称} ③封装成Map #{map的key}
	4.传递多个参数包含对象   封装为pojo包装类型
	实际开发中：传递参数时，会将所有的参数都封装到一个对象中进行传递。
5.resultType的深入
	1.输出简单类型  直接写  eg：int、String
	2.输出pojo类型  直接写  eg：User
	3.输出是pojo列表类型  写集合的泛型  eg：List<User> 写User
	4.输出时 数据库表中字段和javabean属性不一致 使用resultMap
		<resultMap id="" type="要返回的具体类型">
			主键列
			<id column="表中列名" property="javabean属性" />
			普通列
			<result column="表中列名" property="javabean属性"  />
		</resultMap>
