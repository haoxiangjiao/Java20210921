package com.itheima01_线程安全问题;

/*
概述:如果有多个线程同一时间段运行同一段代码。程序最终结果和单线程运行的结果一致，且其他变量的值也和预期也一致，就是线程安全的。
多线程售票安全问题
    需求:假设有100张电影票，需要从4个窗口同时出售这100张票，用线程模拟该场景。
    分析:采用线程对象模拟多个窗口，因为票是被四个窗口共享的，所以可以使用Runnable子类存储票的变量，并定义买票动作。
卖票问题总结:
    同票
    不存在的票
    丢票
原因总结
    在多线程环境下，共享内容,，被多个位置使用或者说执行了多个操作。
解决思路
    哪里有问题，包裹哪里，不让其他线程干预
解决办法
    线程同步:在某个线程执行某一段共享操作期间，其他线程不能获取这段操作的执行权限，等待操作同步完成后，各个线程才能重新取抢夺CPU资源，完成后续操作。从而保证数据的同步性，解决线程不安全的现象。
同步机制的三中方式
    同步代码块
    同步方法
    锁机制

*/
public class Test {
    public static void main(String[] args) {
        //创建任务对象
        TicketsRunnable tr = new TicketsRunnable();
        //创建四个线程，代表四个窗口执行卖票任务
        Thread t1 = new Thread(tr, "窗口1:");
        Thread t2 = new Thread(tr, "窗口2:");
        Thread t3 = new Thread(tr, "窗口3:");
        Thread t4 = new Thread(tr, "窗口4:");
        //启动四个窗口，开始卖票
        t1.start();
        t2.start();
        t3.start();
        t4.start();
    }
}
