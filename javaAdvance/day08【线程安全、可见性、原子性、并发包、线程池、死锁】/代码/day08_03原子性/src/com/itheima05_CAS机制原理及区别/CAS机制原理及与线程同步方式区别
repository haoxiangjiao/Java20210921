CAS机制理解:
    概述:Compare and Swap即比较并替换。
    CAS有三个操作数：内存值V、旧的预期值A、要修改的值B
    当且仅当预期值A和内存值V相同时，将内存值修改为B并返回true
    如果不相同则证明内存值在并发的情况下被其它线程修改过了，则不作任何修改，返回false
    根据新的内存值，记录新的预期值，并计算要修改的值，再次重复步骤2.

CAS机制与同步机制区别

Synchronized是从悲观的角度出发：
    总是假设最坏的情况，每次去拿数据的时候都认为别人会修改。
    共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程。
    因此Synchronized我们也将其称之为悲观锁，jdk中的ReentrantLock也是一种悲观锁。
CAS是从乐观的角度出发:
    总是假设最好的情况，每次去拿数据的时候都认为别人不会修改。
    不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据。
    CAS这种机制我们也可以将其称之为乐观锁。